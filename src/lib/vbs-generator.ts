
import type { TextFormatConfig, HorizontalAlignment, VerticalAlignment, FormattingConfig, CustomHeaderConfig, CustomColumnConfig, RangeFormattingConfig, SheetProtectionConfig } from './excel-types';
import { parseColumnIdentifier, parseSourceColumns } from './excel-helpers';

// Helper functions for VBScript syntax
function getVbsColor(hex: string): string {
    if (!hex || typeof hex !== 'string') return '';
    const cleanHex = hex.replace('#', '');
    if (cleanHex.length !== 6) return '';
    
    const r = parseInt(cleanHex.substring(0, 2), 16);
    const g = parseInt(cleanHex.substring(2, 4), 16);
    const b = parseInt(cleanHex.substring(4, 6), 16);
    
    if (isNaN(r) || isNaN(g) || isNaN(b)) return '';
    
    return `RGB(${r}, ${g}, ${b})`;
}

function getVbsHorizontalAlignment(alignment: string | undefined): string {
    switch(alignment) {
        case 'left': return 'xlLeft';
        case 'center': return 'xlCenter';
        case 'right': return 'xlRight';
        case 'fill': return 'xlFill';
        case 'justify': return 'xlJustify';
        case 'centerContinuous': return 'xlCenterAcrossSelection';
        default: return '';
    }
}

function getVbsVerticalAlignment(alignment: VerticalAlignment | undefined): string {
    switch(alignment) {
        case 'top': return 'xlTop';
        case 'center': return 'xlCenter';
        case 'bottom': return 'xlBottom';
        case 'justify': return 'xlJustify';
        case 'distributed': return 'xlDistributed';
        default: return '';
    }
}


function generateVbsHeader(toolName: string): string {
    return `Option Explicit

' VBScript generated by Excel Power Tools - ${toolName}
' This script will perform actions on the currently active Excel workbook.

Dim objExcel, objWorkbook, objSheet, i
On Error Resume Next
Set objExcel = GetObject(, "Excel.Application")
If Err.Number <> 0 Then
    Set objExcel = CreateObject("Excel.Application")
End If
On Error GoTo 0

objExcel.Visible = True
Set objWorkbook = objExcel.ActiveWorkbook

If objWorkbook Is Nothing Then
    MsgBox "No active workbook found. Please open the workbook you want to process.", vbExclamation, "No Workbook Active"
    WScript.Quit
End If
`;
}

function generateVbsFooter(): string {
    return `
Set objSheet = Nothing
Set objWorkbook = Nothing
Set objExcel = Nothing

MsgBox "Processing complete.", vbInformation, "Finished"
`;
}

export function generateVbsPreview(
    sheetsToUpdate: string[],
    formattingConfig: FormattingConfig,
    customHeaderConfig?: CustomHeaderConfig,
    customColumnConfig?: CustomColumnConfig,
    rangeFormattingConfig?: RangeFormattingConfig,
    sheetProtectionConfig?: SheetProtectionConfig
): string {

    if (sheetsToUpdate.length === 0) {
        return "' No sheets selected for update. Select sheets to see the script preview.";
    }

    let script = `Option Explicit

Dim objExcel, objWorkbook, objSheet, dataRange, lastCol, customHeaderValue, effectiveDataTitlesRow

' Launch Excel and open the workbook
On Error Resume Next
Set objExcel = CreateObject("Excel.Application")
If Err.Number <> 0 Then
    MsgBox "Excel could not be started. Please check that Excel is installed.", vbCritical, "Error"
    WScript.Quit
End If
On Error GoTo 0

objExcel.Visible = True ' Make Excel visible to the user

' Note: This script assumes the target workbook is the active one.
Set objWorkbook = objExcel.ActiveWorkbook

If objWorkbook Is Nothing Then
    MsgBox "No active workbook found. Please open the workbook you wish to update.", vbInformation, "Info"
    objExcel.Quit
    Set objExcel = Nothing
    WScript.Quit
End If

`;

    sheetsToUpdate.forEach(sheetName => {
        const safeSheetName = sheetName.replace(/"/g, '""');
        
        script += `
' --- Processing Sheet: ${safeSheetName} ---
Set objSheet = Nothing
On Error Resume Next
Set objSheet = objWorkbook.Worksheets("${safeSheetName}")
On Error GoTo 0

If objSheet Is Nothing Then
    ' WScript.Echo "Sheet ""${safeSheetName}"" not found. Skipping."
Else
    effectiveDataTitlesRow = ${formattingConfig.dataTitlesRowNumber}
`;

        if (customHeaderConfig) {
            const insertRow = customHeaderConfig.insertBeforeRow;
            const { styleOptions } = customHeaderConfig;
            const vbsHorizontalAlign = getVbsHorizontalAlignment(styleOptions.horizontalAlignment);
            const vbsVerticalAlign = getVbsVerticalAlignment(styleOptions.verticalAlignment);

            script += `
    ' Insert and create custom header
    objSheet.Rows("${insertRow}:${insertRow}").Insert Shift:=xlDown
`;
            script += `    customHeaderValue = "${customHeaderConfig.text.replace(/"/g, '""')}"\n`;
            
            script += `
    lastCol = objSheet.Cells(effectiveDataTitlesRow + 1, objSheet.Columns.Count).End(xlToLeft).Column
    
    With objSheet.Range(objSheet.Cells(${insertRow}, 1), objSheet.Cells(${insertRow}, lastCol))
        .Value = customHeaderValue
        .Font.Bold = ${styleOptions.bold ? 'True' : 'False'}
        .Font.Italic = ${styleOptions.italic ? 'True' : 'False'}
        .Font.Underline = ${styleOptions.underline ? 'xlUnderlineStyleSingle' : 'xlUnderlineStyleNone'}
        .Font.Size = ${styleOptions.fontSize || 12}
        .Font.Name = "${styleOptions.fontName || 'Calibri'}"
        .WrapText = ${styleOptions.wrapText ? 'True' : 'False'}
        .IndentLevel = ${styleOptions.indent || 0}
        .VerticalAlignment = ${vbsVerticalAlign || 'xlCenter'}
`;
            if (customHeaderConfig.mergeAndCenter) {
                script += `        .Merge\n`;
                script += `        .HorizontalAlignment = xlCenter\n`;
            } else if (vbsHorizontalAlign) {
                script += `        .HorizontalAlignment = ${vbsHorizontalAlign}\n`;
            }
            script += `    End With\n`;

            if (insertRow <= formattingConfig.dataTitlesRowNumber) {
                script += `    effectiveDataTitlesRow = effectiveDataTitlesRow + 1\n`;
            }
        }

        if (customColumnConfig) {
            const insertColIdx = parseColumnIdentifier(customColumnConfig.insertColumnBefore);
            const sourceColIdx = parseColumnIdentifier(customColumnConfig.sourceDataColumn);
            const vbsAlignment = getVbsHorizontalAlignment(customColumnConfig.alignment);

            script += `
    ' --- Custom Column Insertion ---
    Dim newColHeader, textSplitter, partIndex, dataStartRow, i, lastRow, sourceValue, splitParts, newValue
    Dim insertColNum, sourceColNum, originalSourceColNum, newColHeaderRow

    insertColNum = ${insertColIdx !== null ? insertColIdx + 1 : 1}
    sourceColNum = ${sourceColIdx !== null ? sourceColIdx + 1 : 1}
    originalSourceColNum = sourceColNum
    
    newColHeader = "${customColumnConfig.newColumnName}"
    newColHeaderRow = ${customColumnConfig.newColumnHeaderRow}
    textSplitter = "${customColumnConfig.textSplitter}"
    partIndex = ${customColumnConfig.partToUse === -1 ? -1 : customColumnConfig.partToUse - 1}
    dataStartRow = ${customColumnConfig.dataStartRow}
    
    ' Adjust header and data start rows if a custom header was inserted above them
    ${customHeaderConfig ? `
    If ${customHeaderConfig.insertBeforeRow} <= newColHeaderRow Then
        newColHeaderRow = newColHeaderRow + 1
    End If
    If ${customHeaderConfig.insertBeforeRow} <= dataStartRow Then
        dataStartRow = dataStartRow + 1
    End If
    ` : ''}

    ' Insert the new column
    objSheet.Columns(insertColNum).Insert Shift:=xlToRight

    ' Adjust the source column number if it was shifted by the insertion
    If insertColNum <= originalSourceColNum Then
        sourceColNum = sourceColNum + 1
    End If
    
    objSheet.Cells(newColHeaderRow, insertColNum).Value = newColHeader
`;
            if(vbsAlignment) {
                 script += `    objSheet.Columns(insertColNum).HorizontalAlignment = ${vbsAlignment}\n`;
            }
            script += `
    lastRow = objSheet.Cells(objSheet.Rows.Count, sourceColNum).End(xlUp).Row

    For i = dataStartRow To lastRow
        sourceValue = CStr(objSheet.Cells(i, sourceColNum).Value)
        newValue = ""
        If Len(sourceValue) > 0 Then
            splitParts = Split(sourceValue, textSplitter)
            If UBound(splitParts) > -1 Then
                If partIndex = -1 Then
                    newValue = Trim(splitParts(UBound(splitParts)))
                Else
                    If UBound(splitParts) >= partIndex Then
                        newValue = Trim(splitParts(partIndex))
                    End If
                End If
                objSheet.Cells(i, insertColNum).Value = newValue
            End If
        End If
    Next
`;
        }

        if (rangeFormattingConfig) {
            const { startRow, endRow, startCol, endCol, merge, style } = rangeFormattingConfig;
            const vbsRange = `"${startCol}${startRow}:${endCol}${endRow}"`;
            const vbsHAlign = getVbsHorizontalAlignment(style.alignment.horizontal);
            const vbsVAlign = getVbsVerticalAlignment(style.alignment.vertical);
            const fontColorRgb = style.font.color ? getVbsColor(style.font.color) : null;
            const fillColorRgb = style.fill.color ? getVbsColor(style.fill.color) : null;

            script += `
    ' --- Custom Range Formatting ---
    Dim formatRange
    Set formatRange = objSheet.Range(${vbsRange})
    With formatRange
        .Font.Name = "${style.font.name}"
        .Font.Size = ${style.font.size}
        .Font.Bold = ${style.font.bold ? 'True' : 'False'}
        .Font.Italic = ${style.font.italic ? 'True' : 'False'}
        .Font.Underline = ${style.font.underline ? 'xlUnderlineStyleSingle' : 'xlUnderlineStyleNone'}
`;
            if (fontColorRgb) {
                script += `        .Font.Color = ${fontColorRgb}\n`;
            }
            if (fillColorRgb) {
                script += `        .Interior.Color = ${fillColorRgb}\n`;
            }
            if (vbsHAlign) {
                script += `        .HorizontalAlignment = ${vbsHAlign}\n`;
            }
            if (vbsVAlign) {
                script += `        .VerticalAlignment = ${vbsVAlign}\n`;
            }
            if (merge) {
                script += `        .Merge\n`;
            }
            script += `    End With
`;
        }
        
        script += `
    ' Format data column titles
    With objSheet.Rows(effectiveDataTitlesRow)
        .Font.Bold = ${formattingConfig.styleOptions.bold ? 'True' : 'False'}
        .Font.Italic = ${formattingConfig.styleOptions.italic ? 'True' : 'False'}
        .Font.Underline = ${formattingConfig.styleOptions.underline ? 'xlUnderlineStyleSingle' : 'xlUnderlineStyleNone'}
        .Font.Name = "${formattingConfig.styleOptions.fontName || 'Calibri'}"
        .Font.Size = ${formattingConfig.styleOptions.fontSize || 11}
`;
        const headerAlignment = getVbsHorizontalAlignment(formattingConfig.styleOptions.alignment);
        if(headerAlignment) {
            script += `        .HorizontalAlignment = ${headerAlignment}\n`;
        }

        script += `    End With\n`;

        script += `
    ' Apply AutoFilter to create a table
    If objSheet.AutoFilterMode Then objSheet.AutoFilterMode = False
    objSheet.Range("A" & effectiveDataTitlesRow).CurrentRegion.AutoFilter
    
    ' AutoFit columns for better readability
    objSheet.Columns.AutoFit
`;

        if (sheetProtectionConfig && sheetProtectionConfig.password) {
            script += `
    ' --- Sheet Protection ---
`;
            if (sheetProtectionConfig.type === 'range' && sheetProtectionConfig.range) {
                script += `
    objSheet.Cells.Locked = False
    objSheet.Range("${sheetProtectionConfig.range}").Locked = True
`;
            }
            script += `
    objSheet.Protect "${sheetProtectionConfig.password.replace(/"/g, '""')}"
`;
        }
        
        script += `
    objSheet.Activate
    objSheet.Range("A1").Select

    Set objSheet = Nothing
End If
`;
    });
    
    script += `
' --- End of Processing ---

objExcel.DisplayAlerts = False
' objWorkbook.Save ' Uncomment to save changes
' objWorkbook.Close ' Uncomment to close workbook
objExcel.DisplayAlerts = True
' objExcel.Quit ' Uncomment to quit Excel

Set objWorkbook = Nothing
Set objExcel = Nothing

MsgBox "Sheet update operations are complete.", vbInformation, "Finished"
`;

    return script;
}


export function generateDuplicateFinderVbs(
    sheetNames: string[],
    keyColumnsIdentifiers: string,
    updateColumnIdentifier: string,
    updateValue: string,
    headerRow: number,
    highlightColor?: string,
    conditionalColumnIdentifier?: string
): string {
    if (sheetNames.length === 0 || !keyColumnsIdentifiers || !updateColumnIdentifier) {
        return "' Configure options to generate the VBScript preview.";
    }

    const highlightRgb = highlightColor ? getVbsColor(highlightColor) : '';

    let script = generateVbsHeader("Duplicate Finder");
    script += `
Dim dict, key, R, lastRow, updateValue, headerRow, cellValue
Dim keyCols, updateCol, conditionalCol, col, colIndex, headers, compositeKey
Set dict = CreateObject("Scripting.Dictionary")
updateValue = "${updateValue.replace(/"/g, '""')}"
headerRow = ${headerRow}
keyCols = Split("${keyColumnsIdentifiers}", ",")
`;

    sheetNames.forEach(sheetName => {
        const safeSheetName = sheetName.replace(/"/g, '""');
        script += `
' --- Processing Sheet: ${safeSheetName} ---
On Error Resume Next
Set objSheet = objWorkbook.Worksheets("${safeSheetName}")
On Error GoTo 0

If Not objSheet Is Nothing Then
    dict.RemoveAll
    
    ' Resolve column indices from names or letters
    ReDim headers(objSheet.UsedRange.Columns.Count - 1)
    For col = 1 To objSheet.UsedRange.Columns.Count
        headers(col - 1) = LCase(Trim(CStr(objSheet.Cells(headerRow, col).Value)))
    Next
    
    For i = 0 To UBound(keyCols)
        keyCols(i) = Trim(keyCols(i))
        On Error Resume Next
        colIndex = -1
        colIndex = Application.WorksheetFunction.Match(keyCols(i), objSheet.Rows(headerRow), 0)
        If Err.Number <> 0 Then ' Not found by name, try parsing as letter/number
             If IsNumeric(keyCols(i)) Then
                colIndex = CInt(keyCols(i))
             Else
                colIndex = objSheet.Range(keyCols(i) & "1").Column
             End If
        End If
        On Error GoTo 0
        keyCols(i) = colIndex
    Next

    On Error Resume Next
    updateCol = Application.WorksheetFunction.Match("${updateColumnIdentifier}", objSheet.Rows(headerRow), 0)
     If Err.Number <> 0 Then
         If IsNumeric("${updateColumnIdentifier}") Then
            updateCol = CInt("${updateColumnIdentifier}")
         Else
            updateCol = objSheet.Range("${updateColumnIdentifier}" & "1").Column
         End If
    End If

    ${conditionalColumnIdentifier ? `
    conditionalCol = -1
    On Error Resume Next
    conditionalCol = Application.WorksheetFunction.Match("${conditionalColumnIdentifier}", objSheet.Rows(headerRow), 0)
    If Err.Number <> 0 Then
         If IsNumeric("${conditionalColumnIdentifier}") Then
            conditionalCol = CInt("${conditionalColumnIdentifier}")
         Else
            conditionalCol = objSheet.Range("${conditionalColumnIdentifier}" & "1").Column
         End If
    End If
    ` : ''}
    On Error GoTo 0
    
    lastRow = objSheet.Cells(objSheet.Rows.Count, 1).End(-4162).Row ' xlUp

    ' Loop through all rows to find duplicates
    For R = headerRow + 1 To lastRow
        compositeKey = ""
        For Each col in keyCols
            If col > 0 Then
                compositeKey = compositeKey & objSheet.Cells(R, col).Value & "||"
            End If
        Next
        
        If Len(compositeKey) > 0 Then
            If dict.Exists(compositeKey) Then
                ' This is a duplicate row
                Dim markDuplicate
                markDuplicate = True
                ${conditionalColumnIdentifier ? `
                If conditionalCol > 0 Then
                    If Len(Trim(CStr(objSheet.Cells(R, conditionalCol).Value))) > 0 Then
                        markDuplicate = False
                    End If
                End If
                ` : ''}

                If markDuplicate Then
                    objSheet.Cells(R, updateCol).Value = updateValue
                    ${highlightRgb ? `objSheet.Rows(R).Interior.Color = ${highlightRgb}` : ''}
                End If
            Else
                dict.Add compositeKey, R
            End If
        End If
    Next
End If
`;
    });
    script += generateVbsFooter();
    return script;
}

export function generateEmptyCellFinderVbs(
    sheetNames: string[],
    columnsToCheck: string,
    columnsToIgnore: string,
    headerRow: number,
    highlightColor?: string
): string {
    if (sheetNames.length === 0 || !columnsToCheck || !highlightColor) {
        return "' Configure options to generate the VBScript preview. Highlighting must be enabled.";
    }

    const highlightRgb = getVbsColor(highlightColor);
    let script = generateVbsHeader("Empty Cell Finder");
    script += `
Dim R, lastRow, col
Dim dict, item, checkCols, ignoreCols, finalCols, colNum
`;
    sheetNames.forEach(sheetName => {
        const safeSheetName = sheetName.replace(/"/g, '""');
        script += `
' --- Processing Sheet: ${safeSheetName} ---
On Error Resume Next
Set objSheet = objWorkbook.Worksheets("${safeSheetName}")
On Error GoTo 0
If Not objSheet Is Nothing Then
    lastRow = objSheet.UsedRange.Rows.Count
    Set dict = CreateObject("Scripting.Dictionary")

    ' Populate columns to check
    ${columnsToCheck === '*' ? `
    For col = 1 To objSheet.UsedRange.Columns.Count
        dict.Add CStr(col), True
    Next
    ` : `
    checkCols = Split("${parseSourceColumns(columnsToCheck).map(c => c + 1).join(',')}", ",")
    For Each item In checkCols
        If Trim(item) <> "" Then dict.Add Trim(item), True
    Next
    `}
    
    ' Remove columns to ignore
    ${columnsToIgnore ? `
    ignoreCols = Split("${parseSourceColumns(columnsToIgnore).map(c => c + 1).join(',')}", ",")
    For Each item In ignoreCols
        If dict.Exists(Trim(item)) Then
            dict.Remove Trim(item)
        End If
    Next
    ` : ''}
    
    finalCols = dict.Keys()

    For R = ${headerRow + 1} To lastRow
        For Each item In finalCols
            colNum = CInt(item)
            If IsEmpty(objSheet.Cells(R, colNum)) Or Trim(CStr(objSheet.Cells(R, colNum).Value)) = "" Then
                objSheet.Cells(R, colNum).Interior.Color = ${highlightRgb}
            End If
        Next
    Next
End If
`;
    });
    script += generateVbsFooter();
    return script;
}

export function generateTextFormatterVbs(
    sheetNames: string[],
    config: TextFormatConfig
): string {
    const { searchText, searchMode, matchCase, matchEntireCell, style, range } = config;
    if (sheetNames.length === 0 || searchText.length === 0) {
        return "' Configure sheets and text to find to generate the VBScript preview.";
    }
    
    let script = generateVbsHeader("Text Formatter");
    script += `
Dim cell, term, regEx, cellValue
`;
    if (searchMode === 'regex') {
        script += `
Set regEx = CreateObject("VBScript.RegExp")
regEx.Global = True
regEx.IgnoreCase = ${matchCase ? 'False' : 'True'}
`;
    }

    sheetNames.forEach(sheetName => {
        const safeSheetName = sheetName.replace(/"/g, '""');
        script += `
' --- Processing Sheet: ${safeSheetName} ---
On Error Resume Next
Set objSheet = objWorkbook.Worksheets("${safeSheetName}")
On Error GoTo 0
If Not objSheet Is Nothing Then
    Dim searchArea
    ${range ? `Set searchArea = objSheet.Range("${range.startCol}${range.startRow}:${range.endCol}${range.endRow}")` : `Set searchArea = objSheet.UsedRange`}
    
    For Each cell In searchArea.Cells
        If Not IsEmpty(cell) Then
            cellValue = CStr(cell.Value)
            Dim isMatch
            isMatch = False
`;
        searchText.forEach(term => {
            const safeTerm = term.replace(/"/g, '""');
            let condition: string;
            
            if (searchMode === 'regex') {
                const pattern = matchEntireCell ? `^${safeTerm}$` : safeTerm;
                condition = `regEx.Pattern = "${pattern}"\n            If regEx.Test(cellValue) Then isMatch = True`;
            } else {
                const compareFunc = matchCase ? 'cellValue' : 'LCase(cellValue)';
                const termValue = matchCase ? `"${safeTerm}"` : `LCase("${safeTerm}")`;
                const textCondition = matchEntireCell 
                    ? `${compareFunc} = ${termValue}` 
                    : `InStr(1, ${compareFunc}, ${termValue}, ${matchCase ? '0' : '1'}) > 0`;
                condition = `If ${textCondition} Then isMatch = True`;
            }

            script += `
            If Not isMatch Then
                ${condition}
            End If
`;
        });
        
        script += `
            If isMatch Then
`;
        if (style.font) {
            if (style.font.bold !== undefined) script += `                cell.Font.Bold = ${style.font.bold ? 'True' : 'False'}\n`;
            if (style.font.italic !== undefined) script += `                cell.Font.Italic = ${style.font.italic ? 'True' : 'False'}\n`;
            if (style.font.underline !== undefined) script += `                cell.Font.Underline = ${style.font.underline ? 'xlUnderlineStyleSingle' : 'xlUnderlineStyleNone'}\n`;
            if (style.font.name) script += `                cell.Font.Name = "${style.font.name}"\n`;
            if (style.font.size) script += `                cell.Font.Size = ${style.font.size}\n`;
            if (style.font.color) script += `                cell.Font.Color = ${getVbsColor(style.font.color)}\n`;
        }
        if (style.fill && style.fill.color) {
            script += `                cell.Interior.Color = ${getVbsColor(style.fill.color)}\n`;
        }
        if (style.alignment) {
            const hAlign = getVbsHorizontalAlignment(style.alignment.horizontal);
            const vAlign = getVbsVerticalAlignment(style.alignment.vertical);
            if (hAlign) script += `                cell.HorizontalAlignment = ${hAlign}\n`;
            if (vAlign) script += `                cell.VerticalAlignment = ${vAlign}\n`;
        }
        script += `            End If
`;
        script += `
        End If
    Next
End If
`;
    });
    script += generateVbsFooter();
    return script;
}
